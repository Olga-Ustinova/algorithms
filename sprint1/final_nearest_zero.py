# ID успешной посылки: 87873691
"""
Ближайший ноль

Тимофей ищет место для постройки своего дома на улице длиной n, состоящей из n
одинаковых участков. Участок может быть либо пустым, либо уже занятым другим
домом. Тимофей предпочитает жить рядом с другими людьми, поэтому для каждого
участка он хочет знать расстояние до ближайшего пустого участка. Если участок
пустой, расстояние до него будет равно нулю. Нужно помочь Тимофею просчитать
эти расстояния, учитывая карту улицы, на которой дома были пронумерованы в
порядке их постройки.

Формат ввода:
- В первой строке задается длина улицы n (1 ≤ n ≤ 10^6).
- Во второй строке заданы n целых чисел, представляющих номера домов и пустых
участков на улице. Гарантируется, что в последовательности есть хотя бы один
ноль. Номера домов (положительные числа) уникальны и не превосходят 10^9.

Формат вывода:
- Вывести расстояние до ближайшего нуля для каждого участка в одной строке,
разделяя числа пробелами.
"""


def find_nearest_zeros(n, street):
    """
    пример_входных_параметров1:
    5
    0 1 4 9 0
    пример_результата1:
    0 1 2 1 0

    пример_входных_параметров2:
    6
    0 7 9 4 8 20
    пример_результата2:
    0 1 2 3 4 5
    """
    distances = n
    for i in street:
        if i == '0':
            distances = 0
        else:
            distances += 1
        yield distances


def main():
    # Чтение длины улицы и её состояния
    n = int(input())
    street = input().split()

    to_left = find_nearest_zeros(n-1, street)
    to_right = reversed(tuple(find_nearest_zeros(n-1, reversed(street))))

    print(*map(min, zip(to_left, to_right)))


if __name__ == "__main__":
    main()
